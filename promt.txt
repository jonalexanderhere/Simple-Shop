ini adalah code lengkap semua file berhubungan dengan login anda sesuaikan

pertama di folder lib/

middleware.ts
import { NextRequest, NextResponse } from 'next/server'

export function middleware(request: NextRequest) {
  // Check if accessing admin-dashboard routes (except login)
  if (request.nextUrl.pathname.startsWith('/admin-dashboard') && 
      !request.nextUrl.pathname.startsWith('/admin-dashboard/login')) {
    
    // Check for admin token
    const adminToken = request.cookies.get('admin-token')
    
    if (!adminToken) {
      return NextResponse.redirect(new URL('/admin-dashboard/login', request.url))
    }
  }
  
  // Also handle /admin routes if needed
  if (request.nextUrl.pathname.startsWith('/admin') && 
      !request.nextUrl.pathname.startsWith('/admin/login') &&
      !request.nextUrl.pathname.startsWith('/admin-dashboard')) {
    
    const adminToken = request.cookies.get('admin-token')
    
    if (!adminToken) {
      return NextResponse.redirect(new URL('/admin/login', request.url))
    }
  }
  
  return NextResponse.next()
}

export const config = {
  matcher: ['/admin/:path*', '/admin-dashboard/:path*'],
}

auth.ts
"use client"

import { create } from "zustand"
import { persist } from "zustand/middleware"

interface AuthStore {
  isAuthenticated: boolean
  user: { email: string } | null
  login: (email: string, password: string) => Promise<boolean>
  logout: () => void
}

export const useAuth = create<AuthStore>()(
  persist(
    (set, get) => ({
      isAuthenticated: false,
      user: null,
      login: async (email: string, password: string) => {
        console.log("Auth store - starting login process")
        try {
          console.log("Auth store - making API call")
          const response = await fetch('/api/auth/login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ email, password }),
          })

          console.log("Auth store - API response status:", response.status)
          const data = await response.json()
          console.log("Auth store - API response data:", data)

          if (data.success) {
            console.log("Auth store - setting authenticated state")
            set({ 
              isAuthenticated: true, 
              user: { email } 
            })
            
            // Verify state was set
            const newState = get()
            console.log("Auth store - new state after login:", newState)
            
            return true
          } else {
            console.log("Auth store - login failed:", data.message)
            return false
          }
        } catch (error) {
          console.error('Auth store - login error:', error)
          return false
        }
      },
      logout: () => {
        console.log("Auth store - logging out")
        fetch('/api/auth/logout', { method: 'POST' })
        set({ isAuthenticated: false, user: null })
      },
    }),
    {
      name: "yilzi-auth",
      onRehydrateStorage: () => (state) => {
        console.log("Auth store - rehydrated:", state)
      }
    },
  ),
)

skrng di app/

admin/
page.tsx
"use client"

import { useAuth } from "@/lib/auth"
import { useRouter } from "next/navigation"
import { useEffect } from "react"

export default function AdminDashboard() {
  const { isAuthenticated, user, logout } = useAuth()
  const router = useRouter()

  useEffect(() => {
    console.log("Admin dashboard - auth state:", { isAuthenticated, user })
    
    if (!isAuthenticated) {
      console.log("Admin dashboard - not authenticated, redirecting to login")
      router.push('/admin/login')
    }
  }, [isAuthenticated, router])

  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-slate-900 flex items-center justify-center">
        <div className="text-white">Checking authentication...</div>
      </div>
    )
  }

  const handleLogout = () => {
    logout()
    router.push('/admin/login')
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 p-8">
      <div className="max-w-4xl mx-auto">
        <div className="bg-slate-800/50 rounded-lg p-6 border border-blue-500/20">
          <h1 className="text-3xl font-bold text-white mb-4">
            Admin Dashboard
          </h1>
          <div className="text-blue-200 mb-6">
            Welcome, {user?.email}
          </div>
          
          <div className="space-y-4">
            <div className="bg-blue-500/20 p-4 rounded-lg">
              <h2 className="text-xl font-semibold text-white mb-2">
                Dashboard Status
              </h2>
              <p className="text-blue-200">
                You are successfully logged in to the admin panel.
              </p>
            </div>
            
            <div className="flex gap-4">
              <button 
                onClick={() => window.location.reload()}
                className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
              >
                Refresh Page
              </button>
              <button 
                onClick={handleLogout}
                className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
              >
                Logout
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

app/admin/login/
page.tsx
"use client"

import type React from "react"
import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { useAuth } from "@/lib/auth"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Shield } from "lucide-react"

export default function AdminLoginPage() {
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")
  const [error, setError] = useState<string | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [debugInfo, setDebugInfo] = useState<string>("")
  const router = useRouter()
  const { login, isAuthenticated } = useAuth()

  // Check if already authenticated
  useEffect(() => {
    console.log("Auth state:", { isAuthenticated })
    setDebugInfo(`Auth state: ${isAuthenticated}`)
    
    if (isAuthenticated) {
      console.log("Already authenticated, redirecting...")
      router.push('/admin')
    }
  }, [isAuthenticated, router])

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setError(null)
    
    console.log("Starting login process...")
    setDebugInfo("Starting login...")

    try {
      console.log("Calling login with:", { email })
      const success = await login(email, password)
      console.log("Login result:", success)
      
      setDebugInfo(`Login result: ${success}`)
      
      if (success) {
        console.log("Login successful, redirecting to /admin")
        setDebugInfo("Login successful, redirecting...")
        
        // Force redirect after small delay
        setTimeout(() => {
          router.push('/admin')
          router.refresh()
        }, 100)
      } else {
        setError('Invalid login credentials')
        setDebugInfo("Login failed - invalid credentials")
      }
    } catch (error) {
      console.error('Login error:', error)
      setError('Network error. Please try again.')
      setDebugInfo(`Error: ${error}`)
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 p-4">
      <Card className="w-full max-w-md glass-effect border-blue-500/20">
        <CardHeader className="text-center">
          <div className="mx-auto mb-4 flex h-12 w-12 items-center justify-center rounded-full bg-blue-500/20">
            <Shield className="h-6 w-6 text-blue-400" />
          </div>
          <CardTitle className="text-2xl font-bold text-white">Admin Login</CardTitle>
          <CardDescription className="text-blue-200">Access the Yilzi admin dashboard</CardDescription>
          {/* Debug info */}
          {debugInfo && (
            <div className="text-xs text-yellow-300 mt-2 p-2 bg-yellow-900/20 rounded">
              Debug: {debugInfo}
            </div>
          )}
        </CardHeader>
        <CardContent>
          <form onSubmit={handleLogin} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="email" className="text-white">
                Email
              </Label>
              <Input
                id="email"
                type="email"
                placeholder="yilzi@gmail.com"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                className="bg-slate-800/50 border-blue-500/30 text-white placeholder:text-slate-400"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="password" className="text-white">
                Password
              </Label>
              <Input
                id="password"
                type="password"
                placeholder="••••••••"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                className="bg-slate-800/50 border-blue-500/30 text-white"
              />
            </div>
            {error && (
              <Alert className="border-red-500/50 bg-red-500/10">
                <AlertDescription className="text-red-400">{error}</AlertDescription>
              </Alert>
            )}
            <Button type="submit" className="w-full bg-blue-600 hover:bg-blue-700 text-white" disabled={isLoading}>
              {isLoading ? "Signing in..." : "Sign In"}
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  )
}

app/admin/settings.tsx
"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { AdminLayout } from "@/components/admin-layout"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Switch } from "@/components/ui/switch"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Globe, Bell, Shield, Palette, Database, MessageCircle, Save, RefreshCw, CheckCircle } from "lucide-react"
import { useAuth } from "@/lib/auth"
import { shopConfig } from "@/lib/config"

export default function SettingsPage() {
  const { isAuthenticated } = useAuth()
  const router = useRouter()
  const [isSaving, setIsSaving] = useState(false)
  const [saveSuccess, setSaveSuccess] = useState(false)

  const [settings, setSettings] = useState({
    // General Settings
    siteName: shopConfig.shop.name,
    siteTagline: shopConfig.shop.tagline,
    siteDescription: shopConfig.shop.description,
    siteUrl: "https://yilzi.com",
    adminEmail: "admin@yilzi.com",

    // Contact Settings
    whatsapp: shopConfig.contact.whatsapp,
    telegram: shopConfig.contact.telegram,
    instagram: shopConfig.contact.instagram,
    github: shopConfig.contact.github,
    youtube: shopConfig.contact.youtube,

    // Notification Settings
    emailNotifications: true,
    whatsappNotifications: true,
    telegramNotifications: true,
    orderNotifications: true,
    reviewNotifications: true,

    // Security Settings
    twoFactorAuth: false,
    sessionTimeout: 30,
    maxLoginAttempts: 5,
    passwordExpiry: 90,

    // Theme Settings
    primaryColor: "#1e40af",
    secondaryColor: "#1f2937",
    accentColor: "#3b82f6",
    darkMode: true,

    // SEO Settings
    metaTitle: "Yilzi - Digital Solutions Provider",
    metaDescription: "Penyedia solusi digital terdepan untuk kebutuhan bisnis Anda",
    metaKeywords: "digital solutions, web development, bot whatsapp, hosting",
    googleAnalytics: "",
    facebookPixel: "",

    // Maintenance
    maintenanceMode: false,
    maintenanceMessage: "Website sedang dalam pemeliharaan. Mohon kembali lagi nanti.",
  })

  useEffect(() => {
    if (!isAuthenticated) {
      router.push("/admin/login")  // Fixed routing
    }
  }, [isAuthenticated, router])

  if (!isAuthenticated) {
    return null
  }

  const handleSave = async () => {
    setIsSaving(true)
    // Simulate API call
    setTimeout(() => {
      setIsSaving(false)
      setSaveSuccess(true)
      setTimeout(() => setSaveSuccess(false), 3000)
    }, 1500)
  }

  const handleInputChange = (field: string, value: any) => {
    setSettings((prev) => ({ ...prev, [field]: value }))
  }

  return (
    <AdminLayout>
      <div className="space-y-8">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-display font-bold text-white mb-2">Pengaturan Sistem</h1>
            <p className="text-slate-400">Kelola konfigurasi website dan sistem</p>
          </div>
          <Button onClick={handleSave} disabled={isSaving} className="bg-blue-600 hover:bg-blue-700">
            {isSaving ? <RefreshCw className="h-4 w-4 mr-2 animate-spin" /> : <Save className="h-4 w-4 mr-2" />}
            {isSaving ? "Menyimpan..." : "Simpan Perubahan"}
          </Button>
        </div>

        {/* Success Alert */}
        {saveSuccess && (
          <Alert className="border-green-500/50 bg-green-500/10">
            <CheckCircle className="h-4 w-4 text-green-400" />
            <AlertDescription className="text-green-400">Pengaturan berhasil disimpan!</AlertDescription>
          </Alert>
        )}

        {/* Settings Tabs */}
        <Tabs defaultValue="general" className="space-y-6">
          <TabsList className="grid w-full grid-cols-2 lg:grid-cols-6 bg-slate-800">
            <TabsTrigger value="general" className="flex items-center gap-2">
              <Globe className="h-4 w-4" />
              <span className="hidden sm:inline">Umum</span>
            </TabsTrigger>
            <TabsTrigger value="contact" className="flex items-center gap-2">
              <MessageCircle className="h-4 w-4" />
              <span className="hidden sm:inline">Kontak</span>
            </TabsTrigger>
            <TabsTrigger value="notifications" className="flex items-center gap-2">
              <Bell className="h-4 w-4" />
              <span className="hidden sm:inline">Notifikasi</span>
            </TabsTrigger>
            <TabsTrigger value="security" className="flex items-center gap-2">
              <Shield className="h-4 w-4" />
              <span className="hidden sm:inline">Keamanan</span>
            </TabsTrigger>
            <TabsTrigger value="theme" className="flex items-center gap-2">
              <Palette className="h-4 w-4" />
              <span className="hidden sm:inline">Tema</span>
            </TabsTrigger>
            <TabsTrigger value="seo" className="flex items-center gap-2">
              <Database className="h-4 w-4" />
              <span className="hidden sm:inline">SEO</span>
            </TabsTrigger>
          </TabsList>

          {/* General Settings */}
          <TabsContent value="general">
            <Card className="glass-effect border-slate-700">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <Globe className="h-5 w-5 text-blue-400" />
                  Pengaturan Umum
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label className="text-slate-300">Nama Website</Label>
                    <Input
                      value={settings.siteName}
                      onChange={(e) => handleInputChange("siteName", e.target.value)}
                      className="bg-slate-800/50 border-slate-600 text-white"
                    />
                  </div>
                  <div>
                    <Label className="text-slate-300">Tagline</Label>
                    <Input
                      value={settings.siteTagline}
                      onChange={(e) => handleInputChange("siteTagline", e.target.value)}
                      className="bg-slate-800/50 border-slate-600 text-white"
                    />
                  </div>
                </div>
                <div>
                  <Label className="text-slate-300">Deskripsi Website</Label>
                  <Textarea
                    value={settings.siteDescription}
                    onChange={(e) => handleInputChange("siteDescription", e.target.value)}
                    className="bg-slate-800/50 border-slate-600 text-white"
                    rows={3}
                  />
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label className="text-slate-300">URL Website</Label>
                    <Input
                      value={settings.siteUrl}
                      onChange={(e) => handleInputChange("siteUrl", e.target.value)}
                      className="bg-slate-800/50 border-slate-600 text-white"
                    />
                  </div>
                  <div>
                    <Label className="text-slate-300">Email Admin</Label>
                    <Input
                      type="email"
                      value={settings.adminEmail}
                      onChange={(e) => handleInputChange("adminEmail", e.target.value)}
                      className="bg-slate-800/50 border-slate-600 text-white"
                    />
                  </div>
                </div>
                <div className="flex items-center justify-between p-4 bg-slate-800/30 rounded-lg">
                  <div>
                    <Label className="text-white">Mode Maintenance</Label>
                    <p className="text-sm text-slate-400">Aktifkan untuk menutup sementara website</p>
                  </div>
                  <Switch
                    checked={settings.maintenanceMode}
                    onCheckedChange={(checked) => handleInputChange("maintenanceMode", checked)}
                  />
                </div>
                {settings.maintenanceMode && (
                  <div>
                    <Label className="text-slate-300">Pesan Maintenance</Label>
                    <Textarea
                      value={settings.maintenanceMessage}
                      onChange={(e) => handleInputChange("maintenanceMessage", e.target.value)}
                      className="bg-slate-800/50 border-slate-600 text-white"
                      rows={2}
                    />
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {/* Contact Settings */}
          <TabsContent value="contact">
            <Card className="glass-effect border-slate-700">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <MessageCircle className="h-5 w-5 text-green-400" />
                  Informasi Kontak
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label className="text-slate-300">WhatsApp</Label>
                    <Input
                      value={settings.whatsapp}
                      onChange={(e) => handleInputChange("whatsapp", e.target.value)}
                      className="bg-slate-800/50 border-slate-600 text-white"
                      placeholder="628123456789"
                    />
                  </div>
                  <div>
                    <Label className="text-slate-300">Telegram</Label>
                    <Input
                      value={settings.telegram}
                      onChange={(e) => handleInputChange("telegram", e.target.value)}
                      className="bg-slate-800/50 border-slate-600 text-white"
                      placeholder="@username"
                    />
                  </div>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div>
                    <Label className="text-slate-300">Instagram</Label>
                    <Input
                      value={settings.instagram}
                      onChange={(e) => handleInputChange("instagram", e.target.value)}
                      className="bg-slate-800/50 border-slate-600 text-white"
                      placeholder="username"
                    />
                  </div>
                  <div>
                    <Label className="text-slate-300">GitHub</Label>
                    <Input
                      value={settings.github}
                      onChange={(e) => handleInputChange("github", e.target.value)}
                      className="bg-slate-800/50 border-slate-600 text-white"
                      placeholder="username"
                    />
                  </div>
                  <div>
                    <Label className="text-slate-300">YouTube</Label>
                    <Input
                      value={settings.youtube}
                      onChange={(e) => handleInputChange("youtube", e.target.value)}
                      className="bg-slate-800/50 border-slate-600 text-white"
                      placeholder="channel"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Notification Settings */}
          <TabsContent value="notifications">
            <Card className="glass-effect border-slate-700">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <Bell className="h-5 w-5 text-yellow-400" />
                  Pengaturan Notifikasi
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                {[
                  { key: "emailNotifications", label: "Email Notifications", desc: "Terima notifikasi via email" },
                  {
                    key: "whatsappNotifications",
                    label: "WhatsApp Notifications",
                    desc: "Terima notifikasi via WhatsApp",
                  },
                  {
                    key: "telegramNotifications",
                    label: "Telegram Notifications",
                    desc: "Terima notifikasi via Telegram",
                  },
                  { key: "orderNotifications", label: "Order Notifications", desc: "Notifikasi pesanan baru" },
                  { key: "reviewNotifications", label: "Review Notifications", desc: "Notifikasi ulasan baru" },
                ].map((item) => (
                  <div key={item.key} className="flex items-center justify-between p-4 bg-slate-800/30 rounded-lg">
                    <div>
                      <Label className="text-white">{item.label}</Label>
                      <p className="text-sm text-slate-400">{item.desc}</p>
                    </div>
                    <Switch
                      checked={settings[item.key as keyof typeof settings] as boolean}
                      onCheckedChange={(checked) => handleInputChange(item.key, checked)}
                    />
                  </div>
                ))}
              </CardContent>
            </Card>
          </TabsContent>

          {/* Security Settings */}
          <TabsContent value="security">
            <Card className="glass-effect border-slate-700">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <Shield className="h-5 w-5 text-red-400" />
                  Pengaturan Keamanan
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="flex items-center justify-between p-4 bg-slate-800/30 rounded-lg">
                  <div>
                    <Label className="text-white">Two-Factor Authentication</Label>
                    <p className="text-sm text-slate-400">Aktifkan autentikasi dua faktor untuk keamanan ekstra</p>
                  </div>
                  <Switch
                    checked={settings.twoFactorAuth}
                    onCheckedChange={(checked) => handleInputChange("twoFactorAuth", checked)}
                  />
                </div>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div>
                    <Label className="text-slate-300">Session Timeout (menit)</Label>
                    <Input
                      type="number"
                      value={settings.sessionTimeout}
                      onChange={(e) => handleInputChange("sessionTimeout", Number.parseInt(e.target.value))}
                      className="bg-slate-800/50 border-slate-600 text-white"
                    />
                  </div>
                  <div>
                    <Label className="text-slate-300">Max Login Attempts</Label>
                    <Input
                      type="number"
                      value={settings.maxLoginAttempts}
                      onChange={(e) => handleInputChange("maxLoginAttempts", Number.parseInt(e.target.value))}
                      className="bg-slate-800/50 border-slate-600 text-white"
                    />
                  </div>
                  <div>
                    <Label className="text-slate-300">Password Expiry (hari)</Label>
                    <Input
                      type="number"
                      value={settings.passwordExpiry}
                      onChange={(e) => handleInputChange("passwordExpiry", Number.parseInt(e.target.value))}
                      className="bg-slate-800/50 border-slate-600 text-white"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Theme Settings */}
          <TabsContent value="theme">
            <Card className="glass-effect border-slate-700">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <Palette className="h-5 w-5 text-purple-400" />
                  Pengaturan Tema
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="flex items-center justify-between p-4 bg-slate-800/30 rounded-lg">
                  <div>
                    <Label className="text-white">Dark Mode</Label>
                    <p className="text-sm text-slate-400">Gunakan tema gelap sebagai default</p>
                  </div>
                  <Switch
                    checked={settings.darkMode}
                    onCheckedChange={(checked) => handleInputChange("darkMode", checked)}
                  />
                </div>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div>
                    <Label className="text-slate-300">Primary Color</Label>
                    <div className="flex items-center gap-3">
                      <Input
                        type="color"
                        value={settings.primaryColor}
                        onChange={(e) => handleInputChange("primaryColor", e.target.value)}
                        className="w-16 h-10 bg-slate-800/50 border-slate-600"
                      />
                      <Input
                        value={settings.primaryColor}
                        onChange={(e) => handleInputChange("primaryColor", e.target.value)}
                        className="flex-1 bg-slate-800/50 border-slate-600 text-white"
                      />
                    </div>
                  </div>
                  <div>
                    <Label className="text-slate-300">Secondary Color</Label>
                    <div className="flex items-center gap-3">
                      <Input
                        type="color"
                        value={settings.secondaryColor}
                        onChange={(e) => handleInputChange("secondaryColor", e.target.value)}
                        className="w-16 h-10 bg-slate-800/50 border-slate-600"
                      />
                      <Input
                        value={settings.secondaryColor}
                        onChange={(e) => handleInputChange("secondaryColor", e.target.value)}
                        className="flex-1 bg-slate-800/50 border-slate-600 text-white"
                      />
                    </div>
                  </div>
                  <div>
                    <Label className="text-slate-300">Accent Color</Label>
                    <div className="flex items-center gap-3">
                      <Input
                        type="color"
                        value={settings.accentColor}
                        onChange={(e) => handleInputChange("accentColor", e.target.value)}
                        className="w-16 h-10 bg-slate-800/50 border-slate-600"
                      />
                      <Input
                        value={settings.accentColor}
                        onChange={(e) => handleInputChange("accentColor", e.target.value)}
                        className="flex-1 bg-slate-800/50 border-slate-600 text-white"
                      />
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* SEO Settings */}
          <TabsContent value="seo">
            <Card className="glass-effect border-slate-700">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <Database className="h-5 w-5 text-cyan-400" />
                  Pengaturan SEO & Analytics
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div>
                  <Label className="text-slate-300">Meta Title</Label>
                  <Input
                    value={settings.metaTitle}
                    onChange={(e) => handleInputChange("metaTitle", e.target.value)}
                    className="bg-slate-800/50 border-slate-600 text-white"
                  />
                </div>
                <div>
                  <Label className="text-slate-300">Meta Description</Label>
                  <Textarea
                    value={settings.metaDescription}
                    onChange={(e) => handleInputChange("metaDescription", e.target.value)}
                    className="bg-slate-800/50 border-slate-600 text-white"
                    rows={3}
                  />
                </div>
                <div>
                  <Label className="text-slate-300">Meta Keywords</Label>
                  <Input
                    value={settings.metaKeywords}
                    onChange={(e) => handleInputChange("metaKeywords", e.target.value)}
                    className="bg-slate-800/50 border-slate-600 text-white"
                    placeholder="keyword1, keyword2, keyword3"
                  />
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label className="text-slate-300">Google Analytics ID</Label>
                    <Input
                      value={settings.googleAnalytics}
                      onChange={(e) => handleInputChange("googleAnalytics", e.target.value)}
                      className="bg-slate-800/50 border-slate-600 text-white"
                      placeholder="GA-XXXXXXXXX-X"
                    />
                  </div>
                  <div>
                    <Label className="text-slate-300">Facebook Pixel ID</Label>
                    <Input
                      value={settings.facebookPixel}
                      onChange={(e) => handleInputChange("facebookPixel", e.target.value)}
                      className="bg-slate-800/50 border-slate-600 text-white"
                      placeholder="123456789012345"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </AdminLayout>
  )
}

terus app/auth/

app/api/auth/login/route.ts
import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  console.log("API Route - login endpoint called")
  
  try {
    const { email, password } = await request.json()
    console.log("API Route - received credentials:", { 
      email, 
      password: password ? `${password.length} chars` : "empty",
      passwordPreview: password ? password.substring(0, 3) + "***" : "empty"
    })

    // Get credentials from environment variables
    const adminEmail = process.env.ADMIN_EMAIL
    const adminPassword = process.env.ADMIN_PASSWORD
    
    console.log("API Route - env variables:", { 
      adminEmail: adminEmail || "NOT_SET", 
      adminPassword: adminPassword ? `${adminPassword.length} chars` : "NOT_SET",
      adminPasswordPreview: adminPassword ? adminPassword.substring(0, 3) + "***" : "NOT_SET"
    })

    // Trim whitespace from inputs
    const trimmedEmail = email?.trim()
    const trimmedPassword = password?.trim()
    const trimmedAdminEmail = adminEmail?.trim()
    const trimmedAdminPassword = adminPassword?.trim()

    console.log("API Route - comparison:", {
      emailMatch: trimmedEmail === trimmedAdminEmail,
      passwordMatch: trimmedPassword === trimmedAdminPassword,
      emailLength: { received: trimmedEmail?.length, expected: trimmedAdminEmail?.length },
      passwordLength: { received: trimmedPassword?.length, expected: trimmedAdminPassword?.length }
    })

    // Validate credentials with trimmed values
    if (trimmedEmail === trimmedAdminEmail && trimmedPassword === trimmedAdminPassword) {
      console.log("API Route - credentials match, creating token")
      
      // Create a simple token
      const token = Buffer.from(`${trimmedEmail}:${Date.now()}`).toString('base64')
      
      const response = NextResponse.json({ 
        success: true, 
        message: 'Login successful',
        debug: {
          email: trimmedEmail,
          timestamp: new Date().toISOString()
        }
      })
      
      // Set HTTP-only cookie
      response.cookies.set('admin-token', token, {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'strict',
        maxAge: 24 * 60 * 60 * 1000, // 24 hours
        path: '/'
      })
      
      console.log("API Route - sending success response with cookie")
      return response
    } else {
      console.log("API Route - credentials don't match")
      
      return NextResponse.json(
        { 
          success: false, 
          message: 'Invalid login credentials',
          debug: {
            emailMatch: trimmedEmail === trimmedAdminEmail,
            passwordMatch: trimmedPassword === trimmedAdminPassword,
            receivedEmail: trimmedEmail,
            receivedPasswordLength: trimmedPassword?.length
          }
        },
        { status: 401 }
      )
    }
  } catch (error) {
    console.error('API Route - login error:', error)
    return NextResponse.json(
      { success: false, message: 'Internal server error', error: String(error) },
      { status: 500 }
    )
  }
}

app/api/auth/logout/route.ts

app/admin-dashboard/page.tsx

"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { AdminLayout } from "@/components/admin-layout"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Switch } from "@/components/ui/switch"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Globe, Bell, Shield, Palette, Database, MessageCircle, Save, RefreshCw, CheckCircle } from "lucide-react"
import { useAuth } from "@/lib/auth"
import { shopConfig } from "@/lib/config"

export default function SettingsPage() {
  const { isAuthenticated } = useAuth()
  const router = useRouter()
  const [isSaving, setIsSaving] = useState(false)
  const [saveSuccess, setSaveSuccess] = useState(false)

  const [settings, setSettings] = useState({
    // General Settings
    siteName: shopConfig.shop.name,
    siteTagline: shopConfig.shop.tagline,
    siteDescription: shopConfig.shop.description,
    siteUrl: "https://yilzi.com",
    adminEmail: "admin@yilzi.com",

    // Contact Settings
    whatsapp: shopConfig.contact.whatsapp,
    telegram: shopConfig.contact.telegram,
    instagram: shopConfig.contact.instagram,
    github: shopConfig.contact.github,
    youtube: shopConfig.contact.youtube,

    // Notification Settings
    emailNotifications: true,
    whatsappNotifications: true,
    telegramNotifications: true,
    orderNotifications: true,
    reviewNotifications: true,

    // Security Settings
    twoFactorAuth: false,
    sessionTimeout: 30,
    maxLoginAttempts: 5,
    passwordExpiry: 90,

    // Theme Settings
    primaryColor: "#1e40af",
    secondaryColor: "#1f2937",
    accentColor: "#3b82f6",
    darkMode: true,

    // SEO Settings
    metaTitle: "Yilzi - Digital Solutions Provider",
    metaDescription: "Penyedia solusi digital terdepan untuk kebutuhan bisnis Anda",
    metaKeywords: "digital solutions, web development, bot whatsapp, hosting",
    googleAnalytics: "",
    facebookPixel: "",

    // Maintenance
    maintenanceMode: false,
    maintenanceMessage: "Website sedang dalam pemeliharaan. Mohon kembali lagi nanti.",
  })

  useEffect(() => {
    if (!isAuthenticated) {
      router.push("/admin-dashboard/login")
    }
  }, [isAuthenticated, router])

  if (!isAuthenticated) {
    return null
  }

  const handleSave = async () => {
    setIsSaving(true)
    // Simulate API call
    setTimeout(() => {
      setIsSaving(false)
      setSaveSuccess(true)
      setTimeout(() => setSaveSuccess(false), 3000)
    }, 1500)
  }

  const handleInputChange = (field: string, value: any) => {
    setSettings((prev) => ({ ...prev, [field]: value }))
  }

  return (
    <AdminLayout>
      <div className="space-y-8">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-display font-bold text-white mb-2">Pengaturan Sistem</h1>
            <p className="text-slate-400">Kelola konfigurasi website dan sistem</p>
          </div>
          <Button onClick={handleSave} disabled={isSaving} className="bg-blue-600 hover:bg-blue-700">
            {isSaving ? <RefreshCw className="h-4 w-4 mr-2 animate-spin" /> : <Save className="h-4 w-4 mr-2" />}
            {isSaving ? "Menyimpan..." : "Simpan Perubahan"}
          </Button>
        </div>

        {/* Success Alert */}
        {saveSuccess && (
          <Alert className="border-green-500/50 bg-green-500/10">
            <CheckCircle className="h-4 w-4 text-green-400" />
            <AlertDescription className="text-green-400">Pengaturan berhasil disimpan!</AlertDescription>
          </Alert>
        )}

        {/* Settings Tabs */}
        <Tabs defaultValue="general" className="space-y-6">
          <TabsList className="grid w-full grid-cols-2 lg:grid-cols-6 bg-slate-800">
            <TabsTrigger value="general" className="flex items-center gap-2">
              <Globe className="h-4 w-4" />
              <span className="hidden sm:inline">Umum</span>
            </TabsTrigger>
            <TabsTrigger value="contact" className="flex items-center gap-2">
              <MessageCircle className="h-4 w-4" />
              <span className="hidden sm:inline">Kontak</span>
            </TabsTrigger>
            <TabsTrigger value="notifications" className="flex items-center gap-2">
              <Bell className="h-4 w-4" />
              <span className="hidden sm:inline">Notifikasi</span>
            </TabsTrigger>
            <TabsTrigger value="security" className="flex items-center gap-2">
              <Shield className="h-4 w-4" />
              <span className="hidden sm:inline">Keamanan</span>
            </TabsTrigger>
            <TabsTrigger value="theme" className="flex items-center gap-2">
              <Palette className="h-4 w-4" />
              <span className="hidden sm:inline">Tema</span>
            </TabsTrigger>
            <TabsTrigger value="seo" className="flex items-center gap-2">
              <Database className="h-4 w-4" />
              <span className="hidden sm:inline">SEO</span>
            </TabsTrigger>
          </TabsList>

          {/* General Settings */}
          <TabsContent value="general">
            <Card className="glass-effect border-slate-700">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <Globe className="h-5 w-5 text-blue-400" />
                  Pengaturan Umum
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label className="text-slate-300">Nama Website</Label>
                    <Input
                      value={settings.siteName}
                      onChange={(e) => handleInputChange("siteName", e.target.value)}
                      className="bg-slate-800/50 border-slate-600 text-white"
                    />
                  </div>
                  <div>
                    <Label className="text-slate-300">Tagline</Label>
                    <Input
                      value={settings.siteTagline}
                      onChange={(e) => handleInputChange("siteTagline", e.target.value)}
                      className="bg-slate-800/50 border-slate-600 text-white"
                    />
                  </div>
                </div>
                <div>
                  <Label className="text-slate-300">Deskripsi Website</Label>
                  <Textarea
                    value={settings.siteDescription}
                    onChange={(e) => handleInputChange("siteDescription", e.target.value)}
                    className="bg-slate-800/50 border-slate-600 text-white"
                    rows={3}
                  />
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label className="text-slate-300">URL Website</Label>
                    <Input
                      value={settings.siteUrl}
                      onChange={(e) => handleInputChange("siteUrl", e.target.value)}
                      className="bg-slate-800/50 border-slate-600 text-white"
                    />
                  </div>
                  <div>
                    <Label className="text-slate-300">Email Admin</Label>
                    <Input
                      type="email"
                      value={settings.adminEmail}
                      onChange={(e) => handleInputChange("adminEmail", e.target.value)}
                      className="bg-slate-800/50 border-slate-600 text-white"
                    />
                  </div>
                </div>
                <div className="flex items-center justify-between p-4 bg-slate-800/30 rounded-lg">
                  <div>
                    <Label className="text-white">Mode Maintenance</Label>
                    <p className="text-sm text-slate-400">Aktifkan untuk menutup sementara website</p>
                  </div>
                  <Switch
                    checked={settings.maintenanceMode}
                    onCheckedChange={(checked) => handleInputChange("maintenanceMode", checked)}
                  />
                </div>
                {settings.maintenanceMode && (
                  <div>
                    <Label className="text-slate-300">Pesan Maintenance</Label>
                    <Textarea
                      value={settings.maintenanceMessage}
                      onChange={(e) => handleInputChange("maintenanceMessage", e.target.value)}
                      className="bg-slate-800/50 border-slate-600 text-white"
                      rows={2}
                    />
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {/* Contact Settings */}
          <TabsContent value="contact">
            <Card className="glass-effect border-slate-700">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <MessageCircle className="h-5 w-5 text-green-400" />
                  Informasi Kontak
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label className="text-slate-300">WhatsApp</Label>
                    <Input
                      value={settings.whatsapp}
                      onChange={(e) => handleInputChange("whatsapp", e.target.value)}
                      className="bg-slate-800/50 border-slate-600 text-white"
                      placeholder="628123456789"
                    />
                  </div>
                  <div>
                    <Label className="text-slate-300">Telegram</Label>
                    <Input
                      value={settings.telegram}
                      onChange={(e) => handleInputChange("telegram", e.target.value)}
                      className="bg-slate-800/50 border-slate-600 text-white"
                      placeholder="@username"
                    />
                  </div>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div>
                    <Label className="text-slate-300">Instagram</Label>
                    <Input
                      value={settings.instagram}
                      onChange={(e) => handleInputChange("instagram", e.target.value)}
                      className="bg-slate-800/50 border-slate-600 text-white"
                      placeholder="username"
                    />
                  </div>
                  <div>
                    <Label className="text-slate-300">GitHub</Label>
                    <Input
                      value={settings.github}
                      onChange={(e) => handleInputChange("github", e.target.value)}
                      className="bg-slate-800/50 border-slate-600 text-white"
                      placeholder="username"
                    />
                  </div>
                  <div>
                    <Label className="text-slate-300">YouTube</Label>
                    <Input
                      value={settings.youtube}
                      onChange={(e) => handleInputChange("youtube", e.target.value)}
                      className="bg-slate-800/50 border-slate-600 text-white"
                      placeholder="channel"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Notification Settings */}
          <TabsContent value="notifications">
            <Card className="glass-effect border-slate-700">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <Bell className="h-5 w-5 text-yellow-400" />
                  Pengaturan Notifikasi
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                {[
                  { key: "emailNotifications", label: "Email Notifications", desc: "Terima notifikasi via email" },
                  {
                    key: "whatsappNotifications",
                    label: "WhatsApp Notifications",
                    desc: "Terima notifikasi via WhatsApp",
                  },
                  {
                    key: "telegramNotifications",
                    label: "Telegram Notifications",
                    desc: "Terima notifikasi via Telegram",
                  },
                  { key: "orderNotifications", label: "Order Notifications", desc: "Notifikasi pesanan baru" },
                  { key: "reviewNotifications", label: "Review Notifications", desc: "Notifikasi ulasan baru" },
                ].map((item) => (
                  <div key={item.key} className="flex items-center justify-between p-4 bg-slate-800/30 rounded-lg">
                    <div>
                      <Label className="text-white">{item.label}</Label>
                      <p className="text-sm text-slate-400">{item.desc}</p>
                    </div>
                    <Switch
                      checked={settings[item.key as keyof typeof settings] as boolean}
                      onCheckedChange={(checked) => handleInputChange(item.key, checked)}
                    />
                  </div>
                ))}
              </CardContent>
            </Card>
          </TabsContent>

          {/* Security Settings */}
          <TabsContent value="security">
            <Card className="glass-effect border-slate-700">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <Shield className="h-5 w-5 text-red-400" />
                  Pengaturan Keamanan
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="flex items-center justify-between p-4 bg-slate-800/30 rounded-lg">
                  <div>
                    <Label className="text-white">Two-Factor Authentication</Label>
                    <p className="text-sm text-slate-400">Aktifkan autentikasi dua faktor untuk keamanan ekstra</p>
                  </div>
                  <Switch
                    checked={settings.twoFactorAuth}
                    onCheckedChange={(checked) => handleInputChange("twoFactorAuth", checked)}
                  />
                </div>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div>
                    <Label className="text-slate-300">Session Timeout (menit)</Label>
                    <Input
                      type="number"
                      value={settings.sessionTimeout}
                      onChange={(e) => handleInputChange("sessionTimeout", Number.parseInt(e.target.value))}
                      className="bg-slate-800/50 border-slate-600 text-white"
                    />
                  </div>
                  <div>
                    <Label className="text-slate-300">Max Login Attempts</Label>
                    <Input
                      type="number"
                      value={settings.maxLoginAttempts}
                      onChange={(e) => handleInputChange("maxLoginAttempts", Number.parseInt(e.target.value))}
                      className="bg-slate-800/50 border-slate-600 text-white"
                    />
                  </div>
                  <div>
                    <Label className="text-slate-300">Password Expiry (hari)</Label>
                    <Input
                      type="number"
                      value={settings.passwordExpiry}
                      onChange={(e) => handleInputChange("passwordExpiry", Number.parseInt(e.target.value))}
                      className="bg-slate-800/50 border-slate-600 text-white"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Theme Settings */}
          <TabsContent value="theme">
            <Card className="glass-effect border-slate-700">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <Palette className="h-5 w-5 text-purple-400" />
                  Pengaturan Tema
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="flex items-center justify-between p-4 bg-slate-800/30 rounded-lg">
                  <div>
                    <Label className="text-white">Dark Mode</Label>
                    <p className="text-sm text-slate-400">Gunakan tema gelap sebagai default</p>
                  </div>
                  <Switch
                    checked={settings.darkMode}
                    onCheckedChange={(checked) => handleInputChange("darkMode", checked)}
                  />
                </div>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div>
                    <Label className="text-slate-300">Primary Color</Label>
                    <div className="flex items-center gap-3">
                      <Input
                        type="color"
                        value={settings.primaryColor}
                        onChange={(e) => handleInputChange("primaryColor", e.target.value)}
                        className="w-16 h-10 bg-slate-800/50 border-slate-600"
                      />
                      <Input
                        value={settings.primaryColor}
                        onChange={(e) => handleInputChange("primaryColor", e.target.value)}
                        className="flex-1 bg-slate-800/50 border-slate-600 text-white"
                      />
                    </div>
                  </div>
                  <div>
                    <Label className="text-slate-300">Secondary Color</Label>
                    <div className="flex items-center gap-3">
                      <Input
                        type="color"
                        value={settings.secondaryColor}
                        onChange={(e) => handleInputChange("secondaryColor", e.target.value)}
                        className="w-16 h-10 bg-slate-800/50 border-slate-600"
                      />
                      <Input
                        value={settings.secondaryColor}
                        onChange={(e) => handleInputChange("secondaryColor", e.target.value)}
                        className="flex-1 bg-slate-800/50 border-slate-600 text-white"
                      />
                    </div>
                  </div>
                  <div>
                    <Label className="text-slate-300">Accent Color</Label>
                    <div className="flex items-center gap-3">
                      <Input
                        type="color"
                        value={settings.accentColor}
                        onChange={(e) => handleInputChange("accentColor", e.target.value)}
                        className="w-16 h-10 bg-slate-800/50 border-slate-600"
                      />
                      <Input
                        value={settings.accentColor}
                        onChange={(e) => handleInputChange("accentColor", e.target.value)}
                        className="flex-1 bg-slate-800/50 border-slate-600 text-white"
                      />
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* SEO Settings */}
          <TabsContent value="seo">
            <Card className="glass-effect border-slate-700">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <Database className="h-5 w-5 text-cyan-400" />
                  Pengaturan SEO & Analytics
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div>
                  <Label className="text-slate-300">Meta Title</Label>
                  <Input
                    value={settings.metaTitle}
                    onChange={(e) => handleInputChange("metaTitle", e.target.value)}
                    className="bg-slate-800/50 border-slate-600 text-white"
                  />
                </div>
                <div>
                  <Label className="text-slate-300">Meta Description</Label>
                  <Textarea
                    value={settings.metaDescription}
                    onChange={(e) => handleInputChange("metaDescription", e.target.value)}
                    className="bg-slate-800/50 border-slate-600 text-white"
                    rows={3}
                  />
                </div>
                <div>
                  <Label className="text-slate-300">Meta Keywords</Label>
                  <Input
                    value={settings.metaKeywords}
                    onChange={(e) => handleInputChange("metaKeywords", e.target.value)}
                    className="bg-slate-800/50 border-slate-600 text-white"
                    placeholder="keyword1, keyword2, keyword3"
                  />
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label className="text-slate-300">Google Analytics ID</Label>
                    <Input
                      value={settings.googleAnalytics}
                      onChange={(e) => handleInputChange("googleAnalytics", e.target.value)}
                      className="bg-slate-800/50 border-slate-600 text-white"
                      placeholder="GA-XXXXXXXXX-X"
                    />
                  </div>
                  <div>
                    <Label className="text-slate-300">Facebook Pixel ID</Label>
                    <Input
                      value={settings.facebookPixel}
                      onChange={(e) => handleInputChange("facebookPixel", e.target.value)}
                      className="bg-slate-800/50 border-slate-600 text-white"
                      placeholder="123456789012345"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </AdminLayout>
  )
}

app/admin-dashboard/login/page.tsx
"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Eye, EyeOff, Lock, User, Shield } from "lucide-react"
import { useAuth } from "@/lib/auth"
import { shopConfig } from "@/lib/config"

export default function AdminLoginPage() {
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")
  const [showPassword, setShowPassword] = useState(false)
  const [error, setError] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [debugInfo, setDebugInfo] = useState("")
  const { login, isAuthenticated } = useAuth()
  const router = useRouter()

  useEffect(() => {
    console.log("Admin dashboard login - auth state:", { isAuthenticated })
    setDebugInfo(`Auth state: ${isAuthenticated}`)
    
    if (isAuthenticated) {
      console.log("Already authenticated, redirecting to admin-dashboard...")
      router.push('/admin-dashboard')
    }
  }, [isAuthenticated, router])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setError("")
    
    console.log("Admin dashboard login - starting login process...")
    setDebugInfo("Starting login...")

    try {
      console.log("Admin dashboard login - calling login with email:", email)
      const success = await login(email, password)
      console.log("Admin dashboard login - login result:", success)
      
      setDebugInfo(`Login result: ${success}`)
      
      if (success) {
        console.log("Admin dashboard login - login successful, redirecting to /admin-dashboard")
        setDebugInfo("Login successful, redirecting...")
        
        // Force redirect after small delay
        setTimeout(() => {
          router.push('/admin-dashboard')
          router.refresh()
        }, 100)
      } else {
        setError("Email atau password salah")
        setDebugInfo("Login failed - invalid credentials")
      }
    } catch (err) {
      console.error("Admin dashboard login - error:", err)
      setError("Terjadi kesalahan saat login")
      setDebugInfo(`Error: ${err}`)
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900/20 to-slate-900 flex items-center justify-center p-4">
      <div className="w-full max-w-md">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="flex items-center justify-center mb-4">
            <div className="w-16 h-16 bg-gradient-to-br from-primary to-accent rounded-xl flex items-center justify-center">
              <Shield className="h-8 w-8 text-white" />
            </div>
          </div>
          <h1 className="text-3xl font-display font-bold gradient-text mb-2">Admin Dashboard</h1>
          <p className="text-slate-400">{shopConfig.shop.name} - Login untuk mengakses panel admin</p>
          
          {/* Debug info */}
          {debugInfo && (
            <div className="text-xs text-yellow-300 mt-2 p-2 bg-yellow-900/20 rounded">
              Debug: {debugInfo}
            </div>
          )}
        </div>

        {/* Login Form */}
        <Card className="glass-effect border-slate-700">
          <CardHeader>
            <CardTitle className="text-center text-white">Masuk ke Dashboard</CardTitle>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-6">
              {error && (
                <Alert className="border-red-500/50 bg-red-500/10">
                  <AlertDescription className="text-red-400">{error}</AlertDescription>
                </Alert>
              )}

              <div className="space-y-2">
                <Label htmlFor="email" className="text-slate-300">
                  Email
                </Label>
                <div className="relative">
                  <User className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400" />
                  <Input
                    id="email"
                    type="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    className="pl-10 bg-slate-800/50 border-slate-600 text-white"
                    placeholder="yilzi@gmail.com"
                    required
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="password" className="text-slate-300">
                  Password
                </Label>
                <div className="relative">
                  <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400" />
                  <Input
                    id="password"
                    type={showPassword ? "text" : "password"}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="pl-10 pr-10 bg-slate-800/50 border-slate-600 text-white"
                    placeholder="••••••••"
                    required
                  />
                  <Button
                    type="button"
                    variant="ghost"
                    size="icon"
                    className="absolute right-2 top-1/2 transform -translate-y-1/2 h-6 w-6 text-slate-400 hover:text-white"
                    onClick={() => setShowPassword(!showPassword)}
                  >
                    {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                  </Button>
                </div>
              </div>

              <Button
                type="submit"
                disabled={isLoading}
                className="w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-lg py-3"
              >
                {isLoading ? (
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2" />
                ) : (
                  <Shield className="mr-2 h-5 w-5" />
                )}
                {isLoading ? "Memproses..." : "Masuk"}
              </Button>
            </form>

            {/* Demo Credentials */}
            <div className="mt-6 p-4 bg-slate-800/30 rounded-lg border border-slate-700">
              <p className="text-sm text-slate-400 mb-2">Demo Credentials:</p>
              <p className="text-sm text-slate-300">Email: yilzi@gmail.com</p>
              <p className="text-sm text-slate-300">Password: yilzi123</p>
            </div>
          </CardContent>
        </Card>

        {/* Back to Site */}
        <div className="text-center mt-6">
          <Button variant="ghost" onClick={() => router.push("/")} className="text-slate-400 hover:text-white">
            ← Kembali ke Website
          </Button>
        </div>
      </div>
    </div>
  )
}

